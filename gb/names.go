package gb

var names = map[byte]string{}

func init() {
	names[0x06] = "LD B, n"
	names[0x0E] = "LD C, n"
	names[0x16] = "LD D, n"
	names[0x1E] = "LD E, n"
	names[0x26] = "LD H, n"
	names[0x2E] = "LD L, n"
	names[0x7F] = "LD A,A"
	names[0x78] = "LD A,B"
	names[0x79] = "LD A,C"
	names[0x7A] = "LD A,D"
	names[0x7B] = "LD A,E"
	names[0x7C] = "LD A,H"
	names[0x7D] = "LD A,L"
	names[0x0A] = "LD A,(BC)"
	names[0x1A] = "LD A,(DE)"
	names[0x7E] = "LD A,(HL)"
	names[0xFA] = "LD A,(nn)"
	names[0x3E] = "LD A,(nn)"
	names[0x47] = "LD B,A"
	names[0x40] = "LD B,B"
	names[0x41] = "LD B,C"
	names[0x42] = "LD B,D"
	names[0x43] = "LD B,E"
	names[0x44] = "LD B,H"
	names[0x45] = "LD B,L"
	names[0x46] = "LD B,(HL)"
	names[0x4F] = "LD C,A"
	names[0x48] = "LD C,B"
	names[0x49] = "LD C,C"
	names[0x4A] = "LD C,D"
	names[0x4B] = "LD C,E"
	names[0x4C] = "LD C,H"
	names[0x4D] = "LD C,L"
	names[0x4E] = "LD C,(HL)"
	names[0x57] = "LD D,A"
	names[0x50] = "LD D,B"
	names[0x51] = "LD D,C"
	names[0x52] = "LD D,D"
	names[0x53] = "LD D,E"
	names[0x54] = "LD D,H"
	names[0x55] = "LD D,L"
	names[0x56] = "LD D,(HL)"
	names[0x5F] = "LD E,A"
	names[0x58] = "LD E,B"
	names[0x59] = "LD E,C"
	names[0x5A] = "LD E,D"
	names[0x5B] = "LD E,E"
	names[0x5C] = "LD E,H"
	names[0x5D] = "LD E,L"
	names[0x5E] = "LD E,(HL)"
	names[0x67] = "LD H,A"
	names[0x60] = "LD H,B"
	names[0x61] = "LD H,C"
	names[0x62] = "LD H,D"
	names[0x63] = "LD H,E"
	names[0x64] = "LD H,H"
	names[0x65] = "LD H,L"
	names[0x66] = "LD H,(HL)"
	names[0x6F] = "LD L,A"
	names[0x68] = "LD L,B"
	names[0x69] = "LD L,C"
	names[0x6A] = "LD L,D"
	names[0x6B] = "LD L,E"
	names[0x6C] = "LD L,H"
	names[0x6D] = "LD L,L"
	names[0x6E] = "LD L,(HL)"
	names[0x77] = "LD (HL),A"
	names[0x70] = "LD (HL),B"
	names[0x71] = "LD (HL),C"
	names[0x72] = "LD (HL),D"
	names[0x73] = "LD (HL),E"
	names[0x74] = "LD (HL),H"
	names[0x75] = "LD (HL),L"
	names[0x36] = "LD (HL),n 36"
	names[0x02] = "LD (BC),A"
	names[0x12] = "LD (DE),A"
	names[0xEA] = "LD (nn),A"
	names[0xF2] = "LD A,(C)"
	names[0xE2] = "LD (C),A"
	names[0x3A] = "LDD A,(HL)"
	names[0x32] = "LDD (HL),A"
	names[0x2A] = "LDI A,(HL)"
	names[0x22] = "LDI (HL),A"
	names[0xE0] = "LD (0xFF00+n),A"
	names[0xF0] = "LD A,(0xFF00+n)"
	names[0x01] = "LD BC,nn"
	names[0x11] = "LD DE,nn"
	names[0x21] = "LD HL,nn"
	names[0x31] = "LD SP,nn"
	names[0xF9] = "LD SP,HL"
	names[0xF8] = "LD HL,SP+n"
	names[0x08] = "LD (nn),SP"
	names[0xF5] = "PUSH AF"
	names[0xC5] = "PUSH BC"
	names[0xD5] = "PUSH DE"
	names[0xE5] = "PUSH HL"
	names[0xF1] = "POP AF"
	names[0xC1] = "POP BC"
	names[0xD1] = "POP DE"
	names[0xE1] = "POP HL"
	names[0x87] = "ADD A,A"
	names[0x80] = "ADD A,B"
	names[0x81] = "ADD A,C"
	names[0x82] = "ADD A,D"
	names[0x83] = "ADD A,E"
	names[0x84] = "ADD A,H"
	names[0x85] = "ADD A,L"
	names[0x86] = "ADD A,(HL)"
	names[0xC6] = "ADD A,#"
	names[0x8F] = "ADC A,A"
	names[0x88] = "ADC A,B"
	names[0x89] = "ADC A,C"
	names[0x8A] = "ADC A,D"
	names[0x8B] = "ADC A,E"
	names[0x8C] = "ADC A,H"
	names[0x8D] = "ADC A,L"
	names[0x8E] = "ADC A,(HL)"
	names[0xCE] = "ADC A,#"
	names[0x97] = "SUB A,A"
	names[0x90] = "SUB A,B"
	names[0x91] = "SUB A,C"
	names[0x92] = "SUB A,D"
	names[0x93] = "SUB A,E"
	names[0x94] = "SUB A,H"
	names[0x95] = "SUB A,L"
	names[0x96] = "SUB A,(HL)"
	names[0xD6] = "SUB A,#"
	names[0x9F] = "SBC A,A"
	names[0x98] = "SBC A,B"
	names[0x99] = "SBC A,C"
	names[0x9A] = "SBC A,D"
	names[0x9B] = "SBC A,E"
	names[0x9C] = "SBC A,H"
	names[0x9D] = "SBC A,L"
	names[0x9E] = "SBC A,(HL)"
	names[0xDE] = "SBC A,#"
	names[0xA7] = "AND A,A"
	names[0xA0] = "AND A,B"
	names[0xA1] = "AND A,C"
	names[0xA2] = "AND A,D"
	names[0xA3] = "AND A,E"
	names[0xA4] = "AND A,H"
	names[0xA5] = "AND A,L"
	names[0xA6] = "AND A,(HL)"
	names[0xE6] = "AND A,#"
	names[0xB7] = "OR A,A"
	names[0xB0] = "OR A,B"
	names[0xB1] = "OR A,C"
	names[0xB2] = "OR A,D"
	names[0xB3] = "OR A,E"
	names[0xB4] = "OR A,H"
	names[0xB5] = "OR A,L"
	names[0xB6] = "OR A,(HL)"
	names[0xF6] = "OR A,#"
	names[0xAF] = "XOR A,A"
	names[0xA8] = "XOR A,B"
	names[0xA9] = "XOR A,C"
	names[0xAA] = "XOR A,D"
	names[0xAB] = "XOR A,E"
	names[0xAC] = "XOR A,H"
	names[0xAD] = "XOR A,L"
	names[0xAE] = "XOR A,(HL)"
	names[0xEE] = "XOR A,#"
	names[0xBF] = "CP A,A"
	names[0xB8] = "CP A,B"
	names[0xB9] = "CP A,C"
	names[0xBA] = "CP A,D"
	names[0xBB] = "CP A,E"
	names[0xBC] = "CP A,H"
	names[0xBD] = "CP A,L"
	names[0xBE] = "CP A,(HL)"
	names[0xFE] = "CP A,#"
	names[0x3C] = "INC A"
	names[0x04] = "INC B"
	names[0x0C] = "INC C"
	names[0x14] = "INC D"
	names[0x1C] = "INC E"
	names[0x24] = "INC H"
	names[0x2C] = "INC L"
	names[0x34] = "INC (HL)"
	names[0x3D] = "DEC A"
	names[0x05] = "DEC B"
	names[0x0D] = "DEC C"
	names[0x15] = "DEC D"
	names[0x1D] = "DEC E"
	names[0x25] = "DEC H"
	names[0x2D] = "DEC L"
	names[0x35] = "DEC (HL)"
	names[0x09] = "ADD HL,BC"
	names[0x19] = "ADD HL,DE"
	names[0x29] = "ADD HL,HL"
	names[0x39] = "ADD HL,SP"
	names[0xE8] = "ADD SP,n"
	names[0x03] = "INC BC"
	names[0x13] = "INC DE"
	names[0x23] = "INC HL"
	names[0x33] = "INC SP"
	names[0x0B] = "DEC BC"
	names[0x1B] = "DEC DE"
	names[0x2B] = "DEC HL"
	names[0x3B] = "DEC SP"
	names[0x27] = "DAA"
	names[0x2F] = "CPL"
	names[0x3F] = "CCF"
	names[0x37] = "SCF"
	names[0x00] = "NOP"
	names[0x76] = "HALT"
	names[0x10] = "STOP"
	names[0xF3] = "DI"
	names[0xFB] = "EI"
	names[0x07] = "RLCA"
	names[0x17] = "RLA"
	names[0x0F] = "RRCA"
	names[0x1F] = "RRA"
	names[0xC3] = "JP nn"
	names[0xC2] = "JP NZ,nn"
	names[0xCA] = "JP Z,nn"
	names[0xD2] = "JP NC,nn"
	names[0xDA] = "JP C,nn"
	names[0xE9] = "JP HL"
	names[0x18] = "JR n"
	names[0x20] = "JR NZ,n"
	names[0x28] = "JR Z,n"
	names[0x30] = "JR NC,n"
	names[0x38] = "JR C,n"
	names[0xCD] = "CALL nn"
	names[0xC4] = "CALL NZ,nn"
	names[0xCC] = "CALL Z,nn"
	names[0xD4] = "CALL NC,nn"
	names[0xDC] = "CALL C,nn"
	names[0xC7] = "RST 0x00"
	names[0xCF] = "RST 0x08"
	names[0xD7] = "RST 0x10"
	names[0xDF] = "RST 0x18"
	names[0xE7] = "RST 0x20"
	names[0xEF] = "RST 0x28"
	names[0xF7] = "RST 0x30"
	names[0xFF] = "RST 0x38"
	names[0xC9] = "RET"
	names[0xC0] = "RET NZ"
	names[0xC8] = "RET Z"
	names[0xD0] = "RET NC"
	names[0xD8] = "RET C"
	names[0xD9] = "RETI"
	names[0xCB] = "CB!"
}

func GetOpcodeName(opcode byte, next byte) string {
	if opcode == 0xCB {
		return CB_NAMES[next]
	}
	return names[opcode]
}
